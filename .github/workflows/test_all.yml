# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  buildall:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest tests --cov=gentry --cov-report=xml

  buildlatest:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest tests --cov=gentry --cov-report=xml
    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(round(float(root.get('line-rate'))*100, 2))")
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
    
    - name: Determine badge color
      id: badge_color
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR=brightgreen
        elif (( $(echo "$COVERAGE >= 75" | bc -l) )); then
          COLOR=yellow
        elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
          COLOR=orange
        else
          COLOR=red
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT

    - name: Download coverage badge
      run: |
        curl -o coverage.svg "https://img.shields.io/badge/Coverage-${{ steps.coverage.outputs.coverage }}%25-${{ steps.badge_color.outputs.color }}"
     
    - name: Commit coverage badge
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add coverage.svg
        git commit -m "Update coverage badge [skip ci]" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}